[
    {
        "id": "fp2_token_refresh_tab",
        "type": "tab",
        "label": "FP2 Token Management",
        "disabled": false,
        "info": "Automatic token refresh system for Aqara FP2 sensor\n\nThis flow automatically generates and refreshes Aqara API tokens using your username and password, eliminating the need for manual token management.\n\nFeatures:\n- Auto refresh every 6 hours (checks if token is older than 24 hours)\n- Manual refresh button for immediate token generation\n- Stores tokens in global variables for use by FP2 flow\n- Status monitoring and error handling\n\nSetup:\n1. Configure your credentials in the 'Aqara Credentials' node\n2. Deploy the flow\n3. Click 'Manual Refresh' to generate initial tokens\n4. Import your FP2 flow - it will automatically use these tokens",
        "env": []
    },
    {
        "id": "aqara_config_node",
        "type": "change",
        "z": "fp2_token_refresh_tab",
        "name": "Aqara Credentials",
        "rules": [
            {"t": "set", "p": "aqara_username", "pt": "global", "to": "your_email@example.com", "tot": "str"},
            {"t": "set", "p": "aqara_password", "pt": "global", "to": "your_password", "tot": "str"},
            {"t": "set", "p": "aqara_area", "pt": "global", "to": "EU", "tot": "str"},
            {"t": "set", "p": "aqara_subjectId", "pt": "global", "to": "lumi1.XXXXXXXXXXXX", "tot": "str"},
            {"t": "set", "p": "aqara_timezone", "pt": "global", "to": "en-UK", "tot": "str"}
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 160,
        "wires": [["download_token_script"]]
    },
    {
        "id": "download_token_script",
        "type": "exec",
        "z": "fp2_token_refresh_tab",
        "command": "bash",
        "addpay": false,
        "append": "-c \"wget -q https://raw.githubusercontent.com/sdavides/AqaraPOST-Homeassistant/main/generatejson/AqaraPOST-tokenGenerator.py -O /tmp/token_generator.py && chmod +x /tmp/token_generator.py && echo 'Token script ready'\"",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Download Token Script",
        "x": 470,
        "y": 160,
        "wires": [["install_dependencies"], ["script_download_error"], []]
    },
    {
        "id": "install_dependencies",
        "type": "exec", 
        "z": "fp2_token_refresh_tab",
        "command": "bash",
        "addpay": false,
        "append": "-c \"python3 -m pip install -q pycryptodome requests requests-toolbelt 2>/dev/null && echo 'Dependencies installed'\"",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Install Python Dependencies",
        "x": 740,
        "y": 160,
        "wires": [["generate_token"], ["dependency_error"], []]
    },
    {
        "id": "generate_token",
        "type": "exec",
        "z": "fp2_token_refresh_tab",
        "command": "bash",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "30",
        "oldrc": false,
        "name": "Generate Token",
        "x": 220,
        "y": 240,
        "wires": [["parse_token_output"], ["token_generation_error"], []],
        "info": "Executes the Aqara token generator script with credentials"
    },
    {
        "id": "parse_token_output",
        "type": "function",
        "z": "fp2_token_refresh_tab",
        "name": "Parse Token Response",
        "func": "// Parse the token generator output\nconst output = msg.payload;\nconst lines = output.split('\\n');\n\nlet token = '';\nlet appid = '';\nlet server = '';\nlet userid = '';\n\n// Extract values from the script output\nfor (let line of lines) {\n    if (line.includes('Token:')) {\n        token = line.replace(/.*Token:/, '').trim();\n    }\n    if (line.includes('AppID:')) {\n        appid = line.replace(/.*AppID:/, '').trim();\n    }\n    if (line.includes('Server:')) {\n        server = line.replace(/.*Server:/, '').trim();\n    }\n    if (line.includes('UserID:')) {\n        userid = line.replace(/.*UserID:/, '').trim();\n    }\n}\n\nif (token && appid && server) {\n    // Store tokens globally for FP2 flow to use\n    global.set('token', token);\n    global.set('appid', appid);\n    global.set('aqara_url', server);\n    global.set('userid', userid);\n    global.set('subjectId', global.get('aqara_subjectId'));\n    global.set('country', global.get('aqara_timezone'));\n    \n    // Set token refresh timestamp\n    global.set('token_last_refresh', Date.now());\n    \n    msg.payload = {\n        success: true,\n        token: token,\n        appid: appid,\n        server: server,\n        userid: userid,\n        subjectId: global.get('aqara_subjectId'),\n        timestamp: new Date().toISOString(),\n        message: \"Tokens successfully generated and stored\"\n    };\n    \n    node.status({fill: \"green\", shape: \"dot\", text: \"Success: \" + new Date().toLocaleTimeString()});\n} else {\n    msg.payload = {\n        success: false,\n        error: \"Failed to parse token response - check credentials and area\",\n        raw_output: output,\n        parsed: { token, appid, server, userid }\n    };\n    node.status({fill: \"red\", shape: \"ring\", text: \"Parse failed\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [["token_status_output", "create_token_command"]]
    },
    {
        "id": "create_token_command", 
        "type": "function",
        "z": "fp2_token_refresh_tab",
        "name": "Create Token Command",
        "func": "// Create the command to run the token generator with credentials\nconst username = global.get('aqara_username');\nconst password = global.get('aqara_password');\nconst area = global.get('aqara_area');\n\nif (!username || !password || !area) {\n    node.error('Missing credentials - check Aqara Credentials node');\n    return null;\n}\n\n// Create command that pipes credentials to the python script\nconst command = `echo -e \"${username}\\n${password}\\n${area}\" | python3 /tmp/token_generator.py`;\n\nmsg.command = command;\nmsg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 320,
        "wires": [[]],
        "info": "This node creates the command string but doesn't execute it - it's for reference"
    },
    {
        "id": "token_status_output",
        "type": "ha-sensor",
        "z": "fp2_token_refresh_tab",
        "name": "FP2 Token Status",
        "entityConfig": "token_status_config",
        "version": 0,
        "state": "payload.success ? 'Connected' : 'Error'",
        "stateType": "jsonata",
        "attributes": [
            {"property": "last_refresh", "value": "payload.timestamp", "valueType": "msg"},
            {"property": "server", "value": "payload.server", "valueType": "msg"},
            {"property": "subject_id", "value": "payload.subjectId", "valueType": "msg"},
            {"property": "token_preview", "value": "payload.token ? payload.token.substring(0,10) + '...' : 'none'", "valueType": "jsonata"}
        ],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 740,
        "y": 240,
        "wires": [[]]
    },
    {
        "id": "token_debug_output",
        "type": "debug",
        "z": "fp2_token_refresh_tab", 
        "name": "Token Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "script_download_error",
        "type": "debug",
        "z": "fp2_token_refresh_tab",
        "name": "Script Download Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "dependency_error",
        "type": "debug",
        "z": "fp2_token_refresh_tab",
        "name": "Dependency Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 120,
        "wires": []
    },
    {
        "id": "token_generation_error",
        "type": "debug",
        "z": "fp2_token_refresh_tab",
        "name": "Token Generation Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 300,
        "wires": []
    },
    {
        "id": "auto_refresh_inject",
        "type": "inject",
        "z": "fp2_token_refresh_tab",
        "name": "Auto Refresh (Every 6 hours)",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "21600",
        "crontab": "",
        "once": true,
        "onceDelay": 30,
        "topic": "auto_refresh",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 400,
        "wires": [["check_token_age"]]
    },
    {
        "id": "manual_refresh_inject",
        "type": "inject",
        "z": "fp2_token_refresh_tab",
        "name": "Manual Refresh",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "manual_refresh",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 440,
        "wires": [["aqara_config_node"]]
    },
    {
        "id": "startup_refresh_inject",
        "type": "inject",
        "z": "fp2_token_refresh_tab",
        "name": "Startup Refresh (Once)",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 10,
        "topic": "startup_refresh", 
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 480,
        "wires": [["check_token_age"]]
    },
    {
        "id": "check_token_age",
        "type": "function",
        "z": "fp2_token_refresh_tab",
        "name": "Check Token Age",
        "func": "// Check if token needs refresh (older than 23 hours to be safe)\nconst lastRefresh = global.get('token_last_refresh') || 0;\nconst currentToken = global.get('token');\nconst now = Date.now();\nconst hoursSinceRefresh = (now - lastRefresh) / (1000 * 60 * 60);\n\n// Force refresh if no token exists or token is older than 23 hours\nif (!currentToken || hoursSinceRefresh > 23) {\n    node.status({\n        fill: \"yellow\", \n        shape: \"ring\", \n        text: `Token refresh needed (${Math.round(hoursSinceRefresh)}h old)`\n    });\n    return msg; // Trigger refresh\n} else {\n    node.status({\n        fill: \"green\", \n        shape: \"dot\", \n        text: `Token valid (${Math.round(hoursSinceRefresh)}h old)`\n    });\n    return null; // Don't trigger refresh\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 400,
        "wires": [["aqara_config_node"]]
    },
    {
        "id": "token_status_config",
        "type": "ha-entity-config",
        "server": "home_assistant_server",
        "deviceConfig": "fp2_device_config",
        "name": "FP2 Token Status",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {"property": "name", "value": "FP2 Token Status"},
            {"property": "icon", "value": "mdi:key-variant"},
            {"property": "unit_of_measurement", "value": ""},
            {"property": "device_class", "value": ""}
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "fp2_device_config",
        "type": "ha-device-config",
        "name": "Aqara FP2 Token Manager",
        "hwVersion": "1.0",
        "swVersion": "1.0", 
        "identifiers": "fp2_token_manager",
        "connections": "",
        "manufacturer": "Custom",
        "model": "Token Refresh System",
        "via": ""
    },
    {
        "id": "home_assistant_server",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    }
]